// Code generated by MockGen. DO NOT EDIT.
// Source: post_handler.go
//
// Generated by this command:
//
//	mockgen -source=post_handler.go -destination=post_handler_mock_test.go -package=handler_test -typed=true
//

// Package handler_test is a generated GoMock package.
package handler_test

import (
	context "context"
	reflect "reflect"

	model "github.com/nix-united/golang-gin-boilerplate/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockpostService is a mock of postService interface.
type MockpostService struct {
	ctrl     *gomock.Controller
	recorder *MockpostServiceMockRecorder
	isgomock struct{}
}

// MockpostServiceMockRecorder is the mock recorder for MockpostService.
type MockpostServiceMockRecorder struct {
	mock *MockpostService
}

// NewMockpostService creates a new mock instance.
func NewMockpostService(ctrl *gomock.Controller) *MockpostService {
	mock := &MockpostService{ctrl: ctrl}
	mock.recorder = &MockpostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostService) EXPECT() *MockpostServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockpostService) Create(ctx context.Context, userID uint, title, content string) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, title, content)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockpostServiceMockRecorder) Create(ctx, userID, title, content any) *MockpostServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockpostService)(nil).Create), ctx, userID, title, content)
	return &MockpostServiceCreateCall{Call: call}
}

// MockpostServiceCreateCall wrap *gomock.Call
type MockpostServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostServiceCreateCall) Return(arg0 *model.Post, arg1 error) *MockpostServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostServiceCreateCall) Do(f func(context.Context, uint, string, string) (*model.Post, error)) *MockpostServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostServiceCreateCall) DoAndReturn(f func(context.Context, uint, string, string) (*model.Post, error)) *MockpostServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteByUser mocks base method.
func (m *MockpostService) DeleteByUser(ctx context.Context, userID, postID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUser", ctx, userID, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUser indicates an expected call of DeleteByUser.
func (mr *MockpostServiceMockRecorder) DeleteByUser(ctx, userID, postID any) *MockpostServiceDeleteByUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUser", reflect.TypeOf((*MockpostService)(nil).DeleteByUser), ctx, userID, postID)
	return &MockpostServiceDeleteByUserCall{Call: call}
}

// MockpostServiceDeleteByUserCall wrap *gomock.Call
type MockpostServiceDeleteByUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostServiceDeleteByUserCall) Return(arg0 error) *MockpostServiceDeleteByUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostServiceDeleteByUserCall) Do(f func(context.Context, uint, uint) error) *MockpostServiceDeleteByUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostServiceDeleteByUserCall) DoAndReturn(f func(context.Context, uint, uint) error) *MockpostServiceDeleteByUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockpostService) GetByID(ctx context.Context, id uint) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockpostServiceMockRecorder) GetByID(ctx, id any) *MockpostServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockpostService)(nil).GetByID), ctx, id)
	return &MockpostServiceGetByIDCall{Call: call}
}

// MockpostServiceGetByIDCall wrap *gomock.Call
type MockpostServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostServiceGetByIDCall) Return(arg0 *model.Post, arg1 error) *MockpostServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostServiceGetByIDCall) Do(f func(context.Context, uint) (*model.Post, error)) *MockpostServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostServiceGetByIDCall) DoAndReturn(f func(context.Context, uint) (*model.Post, error)) *MockpostServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockpostService) List(ctx context.Context) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockpostServiceMockRecorder) List(ctx any) *MockpostServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockpostService)(nil).List), ctx)
	return &MockpostServiceListCall{Call: call}
}

// MockpostServiceListCall wrap *gomock.Call
type MockpostServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostServiceListCall) Return(arg0 []model.Post, arg1 error) *MockpostServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostServiceListCall) Do(f func(context.Context) ([]model.Post, error)) *MockpostServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostServiceListCall) DoAndReturn(f func(context.Context) ([]model.Post, error)) *MockpostServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateByUser mocks base method.
func (m *MockpostService) UpdateByUser(ctx context.Context, userID, postID uint, title, content string) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByUser", ctx, userID, postID, title, content)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByUser indicates an expected call of UpdateByUser.
func (mr *MockpostServiceMockRecorder) UpdateByUser(ctx, userID, postID, title, content any) *MockpostServiceUpdateByUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByUser", reflect.TypeOf((*MockpostService)(nil).UpdateByUser), ctx, userID, postID, title, content)
	return &MockpostServiceUpdateByUserCall{Call: call}
}

// MockpostServiceUpdateByUserCall wrap *gomock.Call
type MockpostServiceUpdateByUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostServiceUpdateByUserCall) Return(arg0 *model.Post, arg1 error) *MockpostServiceUpdateByUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostServiceUpdateByUserCall) Do(f func(context.Context, uint, uint, string, string) (*model.Post, error)) *MockpostServiceUpdateByUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostServiceUpdateByUserCall) DoAndReturn(f func(context.Context, uint, uint, string, string) (*model.Post, error)) *MockpostServiceUpdateByUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
