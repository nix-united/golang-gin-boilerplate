// Code generated by MockGen. DO NOT EDIT.
// Source: request_logger_middleware.go
//
// Generated by this command:
//
//	mockgen -source=request_logger_middleware.go -destination=request_logger_middleware_mock_test.go -package=middleware_test -typed=true
//

// Package middleware_test is a generated GoMock package.
package middleware_test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mocktracer is a mock of tracer interface.
type Mocktracer struct {
	ctrl     *gomock.Controller
	recorder *MocktracerMockRecorder
	isgomock struct{}
}

// MocktracerMockRecorder is the mock recorder for Mocktracer.
type MocktracerMockRecorder struct {
	mock *Mocktracer
}

// NewMocktracer creates a new mock instance.
func NewMocktracer(ctrl *gomock.Controller) *Mocktracer {
	mock := &Mocktracer{ctrl: ctrl}
	mock.recorder = &MocktracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktracer) EXPECT() *MocktracerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *Mocktracer) Start(ctx context.Context) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MocktracerMockRecorder) Start(ctx any) *MocktracerStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*Mocktracer)(nil).Start), ctx)
	return &MocktracerStartCall{Call: call}
}

// MocktracerStartCall wrap *gomock.Call
type MocktracerStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktracerStartCall) Return(arg0 context.Context, arg1 error) *MocktracerStartCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktracerStartCall) Do(f func(context.Context) (context.Context, error)) *MocktracerStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktracerStartCall) DoAndReturn(f func(context.Context) (context.Context, error)) *MocktracerStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
