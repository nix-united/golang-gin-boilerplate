// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock_test.go -package=post_test -typed=true
//

// Package post_test is a generated GoMock package.
package post_test

import (
	context "context"
	reflect "reflect"

	model "github.com/nix-united/golang-gin-boilerplate/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockpostRepository is a mock of postRepository interface.
type MockpostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockpostRepositoryMockRecorder
}

// MockpostRepositoryMockRecorder is the mock recorder for MockpostRepository.
type MockpostRepositoryMockRecorder struct {
	mock *MockpostRepository
}

// NewMockpostRepository creates a new mock instance.
func NewMockpostRepository(ctrl *gomock.Controller) *MockpostRepository {
	mock := &MockpostRepository{ctrl: ctrl}
	mock.recorder = &MockpostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostRepository) EXPECT() *MockpostRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockpostRepository) Create(ctx context.Context, post *model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockpostRepositoryMockRecorder) Create(ctx, post any) *MockpostRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockpostRepository)(nil).Create), ctx, post)
	return &MockpostRepositoryCreateCall{Call: call}
}

// MockpostRepositoryCreateCall wrap *gomock.Call
type MockpostRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostRepositoryCreateCall) Return(arg0 error) *MockpostRepositoryCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostRepositoryCreateCall) Do(f func(context.Context, *model.Post) error) *MockpostRepositoryCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostRepositoryCreateCall) DoAndReturn(f func(context.Context, *model.Post) error) *MockpostRepositoryCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockpostRepository) Delete(ctx context.Context, post *model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockpostRepositoryMockRecorder) Delete(ctx, post any) *MockpostRepositoryDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockpostRepository)(nil).Delete), ctx, post)
	return &MockpostRepositoryDeleteCall{Call: call}
}

// MockpostRepositoryDeleteCall wrap *gomock.Call
type MockpostRepositoryDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostRepositoryDeleteCall) Return(arg0 error) *MockpostRepositoryDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostRepositoryDeleteCall) Do(f func(context.Context, *model.Post) error) *MockpostRepositoryDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostRepositoryDeleteCall) DoAndReturn(f func(context.Context, *model.Post) error) *MockpostRepositoryDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAll mocks base method.
func (m *MockpostRepository) GetAll(ctx context.Context) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockpostRepositoryMockRecorder) GetAll(ctx any) *MockpostRepositoryGetAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockpostRepository)(nil).GetAll), ctx)
	return &MockpostRepositoryGetAllCall{Call: call}
}

// MockpostRepositoryGetAllCall wrap *gomock.Call
type MockpostRepositoryGetAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostRepositoryGetAllCall) Return(arg0 []model.Post, arg1 error) *MockpostRepositoryGetAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostRepositoryGetAllCall) Do(f func(context.Context) ([]model.Post, error)) *MockpostRepositoryGetAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostRepositoryGetAllCall) DoAndReturn(f func(context.Context) ([]model.Post, error)) *MockpostRepositoryGetAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockpostRepository) GetByID(ctx context.Context, id int) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockpostRepositoryMockRecorder) GetByID(ctx, id any) *MockpostRepositoryGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockpostRepository)(nil).GetByID), ctx, id)
	return &MockpostRepositoryGetByIDCall{Call: call}
}

// MockpostRepositoryGetByIDCall wrap *gomock.Call
type MockpostRepositoryGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostRepositoryGetByIDCall) Return(arg0 *model.Post, arg1 error) *MockpostRepositoryGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostRepositoryGetByIDCall) Do(f func(context.Context, int) (*model.Post, error)) *MockpostRepositoryGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostRepositoryGetByIDCall) DoAndReturn(f func(context.Context, int) (*model.Post, error)) *MockpostRepositoryGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockpostRepository) Save(ctx context.Context, post *model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockpostRepositoryMockRecorder) Save(ctx, post any) *MockpostRepositorySaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockpostRepository)(nil).Save), ctx, post)
	return &MockpostRepositorySaveCall{Call: call}
}

// MockpostRepositorySaveCall wrap *gomock.Call
type MockpostRepositorySaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostRepositorySaveCall) Return(arg0 error) *MockpostRepositorySaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostRepositorySaveCall) Do(f func(context.Context, *model.Post) error) *MockpostRepositorySaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostRepositorySaveCall) DoAndReturn(f func(context.Context, *model.Post) error) *MockpostRepositorySaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
